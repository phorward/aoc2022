begin {
    map = ()
    dirs = (
        "^" => (0, -1), # N
        "V" => (0, 1),  # S
        "<" => (-1, 0), # W
        ">" => (1, 0),  # E
    )
    dirs = dirs.items()
    s = null
    sp = null
    max = 0
}

AsciiAlphabetic+  {
    for i = 0; i < $1.len; i++ {
        if $1[i] == "S" s = (i, map.len)
        else if $1[i] == "E" e = (i, map.len)
    }

    map.push($1)
}

dump : @path {
    for y = 0; y < map.len; y++ {
        l = "." * path.len + " "
        for x = 0; x < map[y].len; x++ {
            for i = path.len - 1; i >= 0; i-- {
                if path[i][0] == x && path[i][1] == y {
                    l += path[i][2]
                    break
                }
            }

            if i == -1 {
                l += map[y][x]
            }
        }
        print(l)
    }
}

find : @pos, cd=void, path=void {
    cx = pos[0]
    cy = pos[1]

    cl = if map[cy][cx] == "S" ord("a") else ord(map[cy][cx])

    len = path && path.len || 0
    if len > max max = len
    #print(map[cy][cx] len max)
    if len == 164 {
        print(pos, cd)
    }

    for p = 0; p < dirs.len; p++ {
        #print("." * path.len if p == 0 "N" else if p == 1 "S" else if p == 2 "W" else "E", cl)
        pd = dirs[p][0]
        px = cx + dirs[p][1][0]
        py = cy + dirs[p][1][1]

        if py >= 0 && py < map.len && px >= 0 && px < map[py].len {
            # Check for E, but only when current level is "z"
            if cl == ord("z") && map[py][px] == "E" {
                if (!sp || path.len < sp.len) {
                    print("*** GOAL ***")
                    print(path.len + 1 "steps")
                    sp = path
                }

                return
            }

            # Check if not already in the path
            if !path || !path.get_item("-".join((px, py))) {
                pl = ord(map[py][px])
                #print("." * path.len "check" pl "against" cl)
                if pl == cl || pl == cl + 1 {
                    ppath = if !path dict() else path.clone()
                    ppath["-".join((px, py))] = pd

                    if !sp || ppath.len < sp.len {
                        #print("." * path.len "find call")
                        find((px, py), pd, ppath)
                        #print("." * path.len " => " pr)

                    }
                }
            }
        }
    }
}

end {
    print("s", s)
    print("e", e)

    find((s => "S", ))
    if sp == null {
        print("No path detected!")
    }
    else {
        print("Shortest path is" sp.len + 1 "steps")
    }
}
