rounds : 20  # part1
rounds : 10000  # part2

begin {
    monkeys = ()
}

# Runs one round
run : @factor=3 {
    for i = 0; i < monkeys.len; i++ {
        print("Monkey " i)
        monkey = monkeys[i]

        loop monkey["items"] {
            item = monkey["items"].pop(0)
            print("  Monkey inspects an item with a worry level of" item)

            # Worry level
            x = if monkey["op"][1] == "old" item else monkey["op"][1]  # either variable item or value

            if monkey["op"][0] == "*" {
                item = item * x
                print("    Worry level is multiplied by" x "to" item)
            }
            else {
                item = item + x
                print("    Worry level is increases by" x "to" item)
            }

            #item = int(item / factor)  # part1
            item = item % factor  # part2
            print("    Monkey gets bored with item. Worry level is modulo by" factor "to" item)

            # Test
            test = float(item / monkey["test"]).fract == 0.0
            #print("test1", item, "/", monkey["test"], item / monkey["test"], test)
            test = int(item % monkey["test"]) == 0
            #print("test2", item, "%", monkey["test"], item % monkey["test"], test)
            print("    Current worry level" if test "is" else "is not" "divisible by" monkey["test"])

            for t = 0; t < monkey["actions"].len; t++ {
                action = monkey["actions"][t]
                if action["result"] == test {
                    print("    Item with worry level", item, "is thrown to monkey", action["monkey"])
                    monkeys[action["monkey"]]["items"] += item
                    break
                }
            }

            monkey["inspections"]++
        }
    }
}

dump : @{
    ins = ()

    for i = 0; i < monkeys.len; i++ {
        print("Monkey " i ": " monkeys[i]["items"], monkeys[i]["inspections"])
        ins += monkeys[i]["inspections"]
    }

    sort(ins)
    print("Monkey business" ins[0] * ins[1])
}

#fixme: such a function must be built-in
sort : @l {
	for i = 0; i < l.len; i++ {
		tmp = l[i]

		for j = i + 1; j < l.len; j++ {
			if tmp < l[j] {
				l[i] = l[j]
				l[j] = tmp
				tmp = l[i]
			}
		}
	}
}

# Monkey parser

Bool : @{
    'true' true
    'false' false
}

Monkey : @{
    'Monkey' _ monkey => Int _ ':' _ attr => {
        'Starting items:' items => (_ Int ','?)+ _
        'Operation:' _ 'new' _ '=' _ 'old' _ op => ((''+'' | ''*'' ) _ (Int | ''old'')) _
        'Test: divisible by ' _ test => Int _ actions => {
            'If' _ result => Bool _ ':' _ 'throw to monkey' _ monkey => Int _
            #'If' _ result => ('true' true | 'false' false) _ ':' _ 'throw to monkey' _ monkey => Int _
        }+
    }+ {
        monkey = (
            "inspections" => 0
        )

        for i = 0; i < $attr.len; i++ {
            monkey.merge($attr[i])
        }

        if type(monkey["items"]) == "int" monkey["items"] = (monkey["items"], )  # enforce items being a list
        #print(monkey)
        monkeys += monkey
    }
}

Monkey+ {
    # BUG: Cannot run this in `end` by a unspecified behavior...
    print(monkeys.len "monkeys")

    # part2: find Least Common Multiple
    tests = ()
    for i = 0; i < monkeys.len; i++ {
        tests += monkeys[i]["test"]
    }

    prod = tests[0]
    for i = 1; i < tests.len; i++ {
        prod *= tests[i]
    }

    # Run rounds
    for r = 0; r < rounds; r++ {
        print("ROUND" r + 1)
        run(prod)
        dump()
    }
}
